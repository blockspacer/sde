#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

#set -xv

# Reference: http://www.boost.org/doc/libs/1_61_0/more/getting_started/unix-variants.html

panic()
{
	echo "ERROR"
	exit 1
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage:
	$0 [options]

	options:
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	-v \$version
	    Set the version to install to \$version (e.g., 1.66.0).
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=
install_dir=
toolset=gcc

tmp_dir="${SDE_TMPDIR:-/tmp}/sde_install_boost-$user-$host-$$"

while getopts d:v: opt; do
	case "$opt" in
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir=$(readlink -f "$install_dir") || \
  panic "cannot get absolute pathname"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

make_opts="-j2"

top_dir="$tmp_dir/boost-$version"
archive_dir="$top_dir/archive"
src_dir="$top_dir/src"
build_dir="$top_dir/build"

for dir in "$top_dir" "$archive_dir" "$src_dir" "$build_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

filename_version=$(echo "$version" | tr . _) || panic "failed"

url="https://sourceforge.net/projects/boost/files/boost/$version/boost_${filename_version}.tar.gz"

(cd "$archive_dir" && wget "$url" ) || \
  panic "cannot download archive"

archive_file="$archive_dir/boost_${filename_version}.tar.gz"
tar -xzf "$archive_file" -C "$src_dir" --strip-components=1 || \
  panic "cannot extract archive"

#(cd "$src_dir/tools/build" && ./bootstrap.sh --prefix="$install_dir") || \
#  panic "cannot bootstrap"
#
#(cd "$src_dir/tools/build" && ./b2 install --prefix="$install_dir") || \
#  panic "cannot install Boost.Build"
#
#extended_path="$PATH:$install_dir/bin"
#
#(cd "$src_dir" && \
#  PATH="$extended_path" b2 --build-dir="$build_dir" --build-type=complete \
#  toolset="$toolset" stage) || \
#  panic "cannot build"

(cd "$src_dir" && ./bootstrap.sh --prefix="$abs_install_dir") || \
  panic "cannot bootstrap"

(cd "$src_dir" && ./b2 install) || \
  panic "build failed"

rm -rf "$tmp_dir"

exit 0
