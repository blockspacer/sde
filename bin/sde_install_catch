#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "ERROR: $@"
	exit 1
}

usage()
{
	echo "BAD USAGE: $@"
	cat <<- EOF
	usage:
	$0 -d \$install_dir [-v \$version]

	options:
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	-v \$version
	    Set the version (i.e., branch/commit) to install.
	    e.g., v2.1.0
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=master
install_dir=
tmp_dir="/tmp/sde_install_catch-$user@$host-$$"
verbose=0

while getopts d:v:V opt; do
	case "$opt" in
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	V)
		verbose=$((verbose + 1));;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

case "$version" in
v1.*)
	lib_name=catch;;
*)
	lib_name=catch2;;
esac

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

################################################################################

catch_url="https://github.com/catchorg/Catch2/releases/download/$version/catch.hpp"

top_dir="$tmp_dir/catch-$version"

for dir in "$top_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

inc_dir="$install_dir/include/$lib_name"

mkdir -p "$inc_dir" || panic "cannot make directory $inc_dir"

(cd "$top_dir" && wget "$catch_url") || panic
file="$top_dir/$(basename "$catch_url")"
if [ ! -f "$file" ]; then
	panic
fi
mv "$file" "$inc_dir" || panic

exit

################################################################################
# not currently used
################################################################################

top_dir="$tmp_dir/catch-$version"
src_dir="$top_dir/source"
build_dir="$tmp_dir/build"

for dir in "$top_dir" "$build_dir" "$src_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

catch_url="https://github.com/catchorg/Catch2.git"

if [ "$verbose" -ge 1 ]; then
	echo "############################################################"
	echo "repository $gsl_url"
	echo "commit/tag/branch $version"
	echo "############################################################"
fi

git clone "$catch_url" "$src_dir" || \
  panic "cannot clone repo"

(cd "$src_dir" && git checkout "$version") || \
  panic "cannot clone repo"

cmake_opts=()
cmake_opts+=(-DCMAKE_INSTALL_PREFIX="$install_dir")
cmake -H"$src_dir" -B"$build_dir" "${cmake_opts[@]}" || \
  panic "cmake failed"

(cmake --build "$build_dir") || \
  panic "cmake failed"

(cmake --build "$build_dir" --target install) || \
  panic "install failed"

#rm -rf "$tmp_dir"
