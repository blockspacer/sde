#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

# Reference: http://llvm.org/releases/download.html
# Reference: http://llvm.org/docs/GettingStarted.html
# Reference: http://llvm.org/docs/GettingStarted.html#compiling-the-llvm-suite-source-code
# Reference: http://clang.llvm.org/get_started.html
# Reference: https://llvm.org/svn/llvm-project/cfe/trunk/INSTALL.txt
# Reference: https://gist.github.com/larsch/6823355

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

isabspath()
{
	case "$1" in
	/*)
		echo "1";;
	*)
		echo "0";;
	esac
}

panic()
{
	echo "ERROR: $@"
	exit 1
}

usage()
{
	echo "BAD USAGE: $@"
	cat <<- EOF
	Usage:
	$0 [options] -v \$version -d \$install_dir

	Options:
	-r
	    Build from Subversion repository.
	-g \$gcc_dir
	    Set GCC directory to \$gcc_dir.
	-D
	    Install lldb.
	-t
	    Install the test suite.
	-l
	    Install libcxx.
	-j \$num_jobs
	    Allow the use of \$num_jobs siumultaneous jobs.

	Environment variables:
	SDE_INSTALL_CLANG_STRIPPED
	    Install stripped executables.
        Valid values: 0, 1

	Examples:
	$0 -r -v trunk -d $HOME/local/clang
	$0 -r -v branches/release_70 -d $HOME/local/clang
	$0 -r -v tags/RELEASE_700/final -d $HOME/local/clang
	CC=gcc CXX=g++ $0 -r -v trunk -d $HOME/local/clang
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=
install_dir=
tmp_dir="${SDE_TMPDIR:-/tmp}/sde_install_clang-$user@$host-$$"
gcc_dir=""
use_old_host_toolchain=0
install_libcxx=0
from_repo=0
install_testsuite=0
stop_early=0
install_lldb=0
num_jobs=4

while getopts tlfg:d:v:rSDj: opt; do
	case "$opt" in
	l)
		install_libcxx=1;;
	t)
		install_testsuite=1;;
	f)
		use_old_host_toolchain=1;;
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	g)
		gcc_dir="$OPTARG";;
	r)
		from_repo=1;;
	S)
		stop_early=1;;
	D)
		install_lldb=1;;
	j)
		num_jobs="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir="$install_dir"
result=$(isabspath "$abs_install_dir") || panic "absolute path test failed"
if [ "$result" -eq 0 ]; then
	abs_install_dir="$cur_dir/$abs_install_dir"
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

mangled_version=$(echo "$version" | tr '/' '-') || panic
top_dir="$tmp_dir/llvm-clang-$mangled_version"
archive_dir="$top_dir/archives"
src_dir="$top_dir/src"
build_dir="$top_dir/build"

for dir in "$top_dir" "$archive_dir" "$src_dir" "$build_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

if [ "$from_repo" -ne 0 ]; then

	repo_base="http://llvm.org/svn/llvm-project"

	(cd "$src_dir" && \
	  svn co -q "$repo_base/llvm/$version" .) || \
	  panic "cannot checkout llvm"
	(cd "$src_dir/tools" && \
	  svn co -q "$repo_base/cfe/$version" clang) || \
	  panic "cannot checkout cfe"
	(cd "$src_dir/tools/clang/tools" && \
	  svn co -q "$repo_base/clang-tools-extra/$version" extra) || \
	  panic "cannot checkout clang-tools-extra"
	(cd "$src_dir/tools" && \
	  svn co -q "$repo_base/lld/$version" lld) || \
	  panic "cannot checkout lld"
	(cd "$src_dir/tools" && \
	  svn co -q "$repo_base/polly/$version" polly) || \
	  panic "cannot checkout polly"
	(cd "$src_dir/projects" && \
	  svn co -q "$repo_base/compiler-rt/$version" compiler-rt) || \
	  panic "cannot checkout compiler-rt"
	(cd "$src_dir/projects" && \
	  svn co -q "$repo_base/openmp/$version" openmp) || \
	  panic "cannot checkout openmp"

	if [ "$install_libcxx" -ne 0 ]; then
		(cd "$src_dir/projects" && \
		  svn co -q "$repo_base/libcxx/$version" libcxx) || \
		  panic "cannot checkout libcxx"
		(cd "$src_dir/projects" && \
		  svn co -q "$repo_base/libcxxabi/$version" libcxxabi) || \
		  panic "cannot checkout libcxxabi"
	fi

	if [ "$install_testsuite" -ne 0 ]; then
		(cd "$src_dir/projects" && \
		  svn co -q "$repo_base/test-suite/$version" test-suite) || \
		  panic "cannot checkout test-suite"
	fi

	if [ "$install_lldb" -ne 0 ]; then
		(cd "$src_dir/tools" && \
		  svn co -q "$repo_base/lldb/$version" lldb) || \
		  panic "cannot checkout lldb"
	fi

else

	fetch_releases_from_github=0
	# Note: From the 8.0.1 release onwards (and 7.0.1), releases are available
	# through GitHub.
	result=$(compare_versions 8.0.0 "$version") || panic
	if [ "$result" -lt 0 ]; then
		fetch_releases_from_github=1
	fi
	case "$version" in
	7.1.0)
		fetch_releases_from_github=1;;
	esac
	if [ "$fetch_releases_from_github" -ne 0 ]; then
		base_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version"
	else
		base_url="http://llvm.org/releases/$version"
	fi

	llvm_url="$base_url/llvm-$version.src.tar.xz"
	cfe_url="$base_url/cfe-$version.src.tar.xz"
	cte_url="$base_url/clang-tools-extra-$version.src.tar.xz"
	lld_url="$base_url/lld-$version.src.tar.xz"
	polly_url="$base_url/polly-$version.src.tar.xz"
	cr_url="$base_url/compiler-rt-$version.src.tar.xz"
	openmp_url="$base_url/openmp-$version.src.tar.xz"
	libcxx_url="$base_url/libcxx-$version.src.tar.xz"
	libcxxabi_url="$base_url/libcxxabi-$version.src.tar.xz"
	testsuite_url="$base_url/test-suite-$version.src.tar.xz"
	lldb_url="$base_url/lldb-$version.src.tar.xz"

	urls=()
	urls+=("$llvm_url")
	urls+=("$cfe_url")
	urls+=("$cr_url")
	urls+=("$cte_url")
	urls+=("$lld_url")
	urls+=("$polly_url")
	urls+=("$openmp_url")
	if [ "$install_libcxx" -ne 0 ]; then
		urls+=("$libcxx_url")
		urls+=("$libcxxabi_url")
	fi
	if [ "$install_lldb" -ne 0 ]; then
		urls+=("$lldb_url")
	fi
	if [ "$install_testsuite" -ne 0 ]; then
		urls+=("$testsuite_url")
	fi
	for url in "${urls[@]}"; do
		(cd "$archive_dir" && wget "$url") || panic "cannot get URL $url"
	done

	tar -xJf "$archive_dir/$(basename "$llvm_url")" \
	  -C "$src_dir" --strip-components=1 || panic "cannot extract llvm archive"

	extract_dir="$src_dir/tools/clang"
	if [ ! -d "$extract_dir" ]; then
		mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
	fi
	tar -xJf "$archive_dir/$(basename "$cfe_url")" \
	  -C "$extract_dir" --strip-components=1 || panic "cannot extract cfe archive"

	extract_dir="$src_dir/tools/clang/tools/extra"
	if [ ! -d "$extract_dir" ]; then
		mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
	fi
	tar -xJf "$archive_dir/$(basename "$cte_url")" \
	  -C "$extract_dir" --strip-components=1 || \
	  panic "cannot extract clang-tools-extra archive"

	extract_dir="$src_dir/tools/lld"
	if [ ! -d "$extract_dir" ]; then
		mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
	fi
	tar -xJf "$archive_dir/$(basename "$lld_url")" \
	  -C "$extract_dir" --strip-components=1 || \
	  panic "cannot extract lld archive"

	extract_dir="$src_dir/tools/polly"
	if [ ! -d "$extract_dir" ]; then
		mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
	fi
	tar -xJf "$archive_dir/$(basename "$polly_url")" \
	  -C "$extract_dir" --strip-components=1 || \
	  panic "cannot extract polly archive"

	extract_dir="$src_dir/projects/compiler-rt"
	if [ ! -d "$extract_dir" ]; then
		mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
	fi
	tar -xJf "$archive_dir/$(basename "$cr_url")" \
	  -C "$extract_dir" --strip-components=1 || panic "cannot extract compiler-rt archive"

	extract_dir="$src_dir/projects/openmp"
	if [ ! -d "$extract_dir" ]; then
		mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
	fi
	tar -xJf "$archive_dir/$(basename "$openmp_url")" \
	  -C "$extract_dir" --strip-components=1 || \
	  panic "cannot extract openmp archive"

	if [ "$install_libcxx" -ne 0 ]; then
		extract_dir="$src_dir/projects/libcxx"
		if [ ! -d "$extract_dir" ]; then
			mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
		fi
		tar -xJf "$archive_dir/$(basename "$libcxx_url")" \
		  -C "$extract_dir" --strip-components=1 || panic "cannot extract libcxx archive"
	fi

	if [ "$install_libcxx" -ne 0 ]; then
		extract_dir="$src_dir/projects/libcxxabi"
		if [ ! -d "$extract_dir" ]; then
			mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
		fi
		tar -xJf "$archive_dir/$(basename "$libcxxabi_url")" \
		  -C "$extract_dir" --strip-components=1 || panic "cannot extract libcxx archive"
	fi

	if [ "$install_lldb" -ne 0 ]; then
		extract_dir="$src_dir/tools/lldb"
		if [ ! -d "$extract_dir" ]; then
			mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
		fi
		tar -xJf "$archive_dir/$(basename "$lldb_url")" \
		  -C "$extract_dir" --strip-components=1 || \
		  panic "cannot extract lldb archive"
	fi

	if [ "$install_testsuite" -ne 0 ]; then
		extract_dir="$src_dir/projects/test-suite"
		if [ ! -d "$extract_dir" ]; then
			mkdir -p "$extract_dir" || panic "cannot make directory $extract_dir"
		fi
		tar -xJf "$archive_dir/$(basename "$testsuite_url")" \
		  -C "$extract_dir" --strip-components=1 || \
		  panic "cannot extract test-suite archive"
	fi

fi

if [ "$stop_early" -ne 0 ]; then
	exit 0
fi

cmake_opts=()

cmake_opts+=(-G "Unix Makefiles")
cmake_opts+=(-DCMAKE_INSTALL_PREFIX="$abs_install_dir")
cmake_opts+=(-DCMAKE_VERBOSE_MAKEFILE=true)
cmake_opts+=(-DCMAKE_BUILD_TYPE=Release)
cmake_opts+=(-DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++")
if [ "$use_old_host_toolchain" -ne 0 ]; then
	cmake_opts+=(-DLLVM_FORCE_USE_OLD_HOST_TOOLCHAIN=true)
fi

if [ -n "$gcc_dir" ]; then
	cmake_opts+=(-DCMAKE_C_COMPILER="${gcc_dir}/bin/gcc")
	cmake_opts+=(-DCMAKE_CXX_COMPILER="${gcc_dir}/bin/g++")
	cmake_opts+=(-DGCC_INSTALL_PREFIX="${gcc_dir}")
#	cmake_opts+=(-DCMAKE_CXX_LINK_FLAGS="-L${gcc_dir}/lib64 -Wl,-rpath,${gcc_dir}/lib64")
fi

echo "Running cd $build_dir && cmake ${cmake_opts[@]} $src_dir"
(cd "$build_dir" && cmake "${cmake_opts[@]}" "$src_dir") || \
  panic "cmake failed"

make_opts=()
make_opts+=(-j$num_jobs)

(cd "$build_dir" && make "${make_opts[@]}") || panic "make failed"

if [ "${SDE_INSTALL_CLANG_STRIPPED:-0}" -ne 0 ]; then
	install_target="install/strip"
else
	install_target="install"
fi
(cd "$build_dir" && make "$install_target") || panic "make install failed"

rm -rf "$tmp_dir"
