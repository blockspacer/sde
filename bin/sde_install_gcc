#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

# Reference: https://www.gnu.org/software/gcc/svn.html
# Reference: https://gcc.gnu.org/wiki/HomePage
# Reference: https://d-meiser.github.io/2015/11/30/building-gcc-trunk.html
# Reference: http://www.linuxfromscratch.org/blfs/view/cvs/general/gcc.html

# Note: The GCC build process cannot seem to handle "@" characters
# in pathnames.

panic()
{
	echo "ERROR: $@"
	exit 1
}

disk_usage()
{
	local dir="$1"
	du -sk "$dir" | awk '{print $1;}' -
}

validate_url()
{
	local url="$1"
	case "$url" in
	http*)
		wget -S --spider "$url" 2>&1 | grep -q "HTTP/1.1 200 OK"
		;;
	ftp*)
		wget -S --spider "$url" 2>&1 | grep -q -i "exists"
		;;
	*)
		return 2;;
	esac
}

usage()
{
	echo "bad usage: $@"
	cat <<- EOF
	$0 [options] -v \$version -d \$install_dir

	Options
	=======

	-d \$install_dir
	    Set the installation directory to \$install_dir.
	-v \$version
	    Set the version to install to \$version.
	-r
	    Install from GNU GCC Subversion repository.
	-j \$num_jobs
	    Allow the use of \$num_jobs simultaneous jobs.
	-x
	    Download only but do not build and install.
	-p \$patch_file
	    Apply the patch file \$patch_file before building.

	Environment Variables
	=====================

	SDE_TMPDIR
	    Specifies the directory under which temporary files are placed
	    (e.g., when building software prior to installation).
	SDE_INSTALL_GCC_ENABLE_LANGUAGES
	    A comma-separated list of language to be built.
	SDE_INSTALL_GCC_STRIPPED
	    Install stripped executables.
	    Valid values: 0, 1

	Examples
	========

	$0 -v 8.2.0 -d $HOME/local/gcc
	$0 -r -v tags/gcc_8_2_0_release -d $HOME/local/gcc
	$0 -r -v branches/c++-modules -d $HOME/local/gcc
	$0 -r -v trunk -d $HOME/local/gcc
	SDE_TMPDIR=/var/tmp $0 -r -v trunk -d $HOME/local/gcc
	SDE_INSTALL_GCC_ENABLE_LANGUAGES=go $0 -v 8.2.0 -d $HOME/local/gccgo
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=
install_dir=
from_repo=0

# Do not use user@host in the following pathname, since the GCC build
# process cannot seem to handle "@" characters in pathnames.
tmp_dir="${SDE_TMPDIR:-/tmp}/sde_install_gcc-$user-$host-$$"

old_abi=0
num_jobs=4
download_only=0
patch_files=()

while getopts d:v:o:rj:xp: opt; do
	case "$opt" in
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	o)
		case "$OPTARG" in
		old_abi)
			old_abi=1;;
		new_abi)
			old_abi=0;;
		*)
			usage;;
		esac
		;;
	r)
		from_repo=1
		;;
	j)
		num_jobs="$OPTARG";;
	x)
		download_only=1;;
	p)
		patch_files+=("$OPTARG");;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir=$(readlink -f "$install_dir") || \
  panic "cannot get absolute pathname"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

make_opts=()
make_opts+=("-j$num_jobs")

mangled_version=$(echo "$version" | tr '/' '-') || \
  panic "cannot get mangled name"
top_dir="$tmp_dir/gcc-$mangled_version"
src_dir="$top_dir/src"
build_dir="$top_dir/build"
archive_dir="$top_dir/archive"
svn_dir="$top_dir/svn"

for dir in "$top_dir" "$archive_dir" "$src_dir" "$build_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

#unset INCLUDE_PATH CPLUS_INCLUDE_PATH CFLAGS CXXFLAGS

if [ $from_repo -ne 0 ]; then
	svn_repo="svn://gcc.gnu.org/svn/gcc/$version"
	svn co "$svn_repo" "$src_dir" || panic "cannot checkout source"
else
	urls=()
	urls+=("https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.xz")
	urls+=("https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.bz2")
	urls+=("https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.gz")
	url=
	for i in "${urls[@]}"; do
		validate_url "$i"
		status=$?
		if [ "$status" -eq 0 ]; then
			url="$i"
			break
		fi
	done
	if [ -z "$url" ]; then
		panic "cannot find archive for download"
	fi
	archive_base=$(basename "$url") || panic "cannot get basename"
	archive_file="$archive_dir/$archive_base"
	(cd "$archive_dir" && wget -O "$archive_file" "$url" ) || \
	  panic "cannot download archive"
	tar_options=()
	case "$archive_file" in
	*.gz)
		tar_options+=(-z);;
	*.bz2)
		tar_options+=(-j);;
	*.xz)
		tar_options+=(-J);;
	*)
		panic "unexpected file type";;
	esac
	tar -x "${tar_options[@]}" -f "$archive_file" -C "$src_dir" \
	  --strip-components=1 || \
	  panic "cannot extract archive"
fi

(cd "$src_dir" && ./contrib/download_prerequisites) || \
  panic "cannot download prerequisites"

src_dir_space=$(disk_usage "$src_dir")
echo "SOURCE DIRECTORY DISK USAGE $src_dir_space"

for patch_file in "${patch_files[@]}"; do
	abs_patch_file=$(realpath "$patch_file") || \
	  panic "cannot get real path"
	(cd "$src_dir" && patch -p1 < "$abs_patch_file") || \
	  panic "patch failed for $patch_file"
done

if [ "$download_only" -ne 0 ]; then
	# Note: Do not cleanup.
	exit 0
fi

options=()
if [ "$old_abi" -ne 0 ]; then
	options+=(--with-default-libstdcxx-abi=gcc4-compatible)
fi
options+=(--enable-threads=posix)
options+=(--enable-tls)
options+=(--disable-multilib)
if [ -n "$SDE_INSTALL_GCC_ENABLE_LANGUAGES" ]; then
	options+=(--enable-languages="$SDE_INSTALL_GCC_ENABLE_LANGUAGES")
fi
(cd "$build_dir" && 
  ../src/configure --prefix="$abs_install_dir" "${options[@]}") || \
  panic "configure failed"

(cd "$build_dir" && make "${make_opts[@]}") || \
  panic "make failed"

if [ "${SDE_INSTALL_GCC_STRIPPED:-0}" -ne 0 ]; then
	install_target="install-stripped"
else
	install_target="install"
fi
(cd "$build_dir" && make "$install_target") || \
  panic "make install failed"

tmp_dir_space=$(disk_usage "$tmp_dir")
src_dir_space=$(disk_usage "$src_dir")
build_dir_space=$(disk_usage "$build_dir")
echo "TEMPORARY DIRECTORY DISK USAGE $tmp_dir_space"
echo "SOURCE DIRECTORY DISK USAGE $src_dir_space"
echo "BUILD DIRECTORY DISK USAGE $build_dir_space"

rm -rf "$tmp_dir" || panic "cannot remove temporary directory $tmp_dir"

exit 0
