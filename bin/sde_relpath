#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

# Reference: https://stackoverflow.com/questions/2564634/convert-absolute-path-into-relative-path-given-a-current-directory-using-bash

panic()
{
	echo "FATAL ERROR: $@" 1>&2
	exit 1
}

find_python()
{
	local prog_name
	local prog_path
	local prog_names
	#prog_names=(python2 python python3)
	prog_names=(python3 python python2)
	for prog_name in "${prog_names[@]}"; do
		prog_path=$(type -P "$prog_name")
		if [ $? -eq 0 ]; then
			echo "$prog_path" || return 1
			return 0
		fi
	done
}

usage()
{
	cat <<- EOF
	usage:
	$0 [options] pathnames...

	options:
	-r \$relative_to
	    Specify the relative-to path.
	    This value defaults to the current directory.
	EOF
	exit 2
}

relative_to=

while getopts r: opt; do
	case "$opt" in
	r)
		relative_to="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$relative_to" ]; then
	relative_to=$(pwd) || panic "cannot get current directory"
fi

paths=("$@")

python_program=$(find_python) || panic "cannot find python"

for path in "${paths[@]}"; do
	"$python_program" -c \
	  "import os.path; print(os.path.relpath('""$path""', '""$relative_to""'))"
done
