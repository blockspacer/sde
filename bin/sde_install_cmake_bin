#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

# Reference: https://cmake.org/download/

panic()
{
	echo "ERROR: $@"
	exit 1
}

warn()
{
	echo "WARNING: $@"
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "BAD USAGE: $@"
	fi
	cat <<- EOF
	usage: $0 [options]

	This command downloads and installs CMake.
	The -v and -d options must be specified.

	Options:
	-v \$version
	    Specify the version of CMake to install as \$version
	    (e.g., 5.0.0).
	    This option must be spcified.
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	    This option must be spcified.
	-O \$os
	    Set the operating system type to \$os (e.g., linux-gnu).
	    This option defaults to the currently running operating system.
	-A \$arch
	    Set the architecture type to \$arch (e.g., x86_64).
	    This option defaults to the architecture of the current platform.
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=
install_dir=
tmp_dir="/tmp/sde_install_cmake-$user@$host-$$"
os="$OSTYPE"
arch="x86_64"

while getopts d:v:O:A:h opt; do
	case "$opt" in
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	O)
		os="$OPTARG";;
	A)
		arch="$OPTARG";;
	h)
		usage;;
	\?)
		usage;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi
if [ -z "$os" ]; then
	usage "no operating system specified"
fi
if [ -z "$os" ]; then
	usage "no architecture specified"
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

case "$os" in
linux*)
	cmake_os=Linux;;
darwin*)
	cmake_os=Darwin;;
*)
	panic "unknown operating system $os"
	;;
esac

cmake_arch="$arch"

short_version=$(echo "$version" | sed -e 's/\.[0-9]*\(\|-rc[0-9]*\)$//') || \
  panic "cannot extract short version"
url="https://cmake.org/files/v$short_version/cmake-$version-$cmake_os-$cmake_arch.tar.gz"
archive=$(basename $url) || panic "cannot extract archive name"

if [ -d "$install_dir" ]; then
	panic "installation directory already exists"
fi

mkdir -p "$tmp_dir" || \
  panic "cannot make temporary directory $tmp_dir"

(cd "$tmp_dir" && wget "$url") || \
  panic "cannot download archive"

mkdir -p "$install_dir" || \
  panic "cannot make directory $install_dir"

tar -x -z --strip-components=1 -C "$install_dir" -f "$tmp_dir/$archive" || \
  panic "cannot extract archive"

case "$os" in
linux*)
	cmake_bin_dir="bin";;
darwin*)
	cmake_bin_dir="CMake.app/Contents/bin";;
*)
	panic "unknown operating system $os";;
esac

if [ "$cmake_bin_dir" != "bin" ]; then
	mkdir -p "$install_dir/bin" || panic "cannot make directory"
fi

for file in ccmake cmake cmake-gui cpack ctest; do
	target_file="$install_dir/$cmake_bin_dir/$file"
	chmod a+rx "$target_file" || \
	  panic "cannot set permission for $target_file"
	if [ "$cmake_bin_dir" != "bin" ]; then
		# NOTE: It would be better to use a relative path for the
		# symbolic link created here.
		ln -s "$target_file" "$install_dir/bin" || panic "cannot link file"
	fi
done

rm -f "$tmp_dir/$archive"
rmdir "$tmp_dir" || warn "cannot remove temporary directory $tmp_dir"

exit 0
